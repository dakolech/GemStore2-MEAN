// Generated by CoffeeScript 1.7.1
var Category, Product, fs, im;

Product = require('../models/product');

Category = require('../models/category');

fs = require('fs');

im = require('imagemagick');

im.identify.path = '../identify.exe';

im.convert.path = '../convert.exe';

exports.name = function(req, res) {
  res.json({
    name: 'Boby'
  });
};

exports.products = function(req, res) {
  return Product.find(function(err, products) {
    if (err) {
      res.send(err);
    }
    return res.json(products);
  });
};

exports.productsCategory = function(req, res) {
  return Product.find({
    'category': req.params.category
  }, function(err, products) {
    if (err) {
      res.send(err);
    }
    return res.json(products);
  });
};

exports.product = function(req, res) {
  return Product.findById(req.params.id, function(err, product) {
    if (err) {
      res.send(err);
    }
    return res.json(product);
  });
};

exports.addProduct = function(req, res) {
  console.log('Product created: ' + req.body.name + ', ' + req.body.price + ' id: ' + req.body.id);
  Product.create({
    name: req.body.name,
    price: req.body.price,
    description: req.body.description,
    canPurchase: req.body.canPurchase,
    category: req.body.category
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Product.find(function(err, products) {
      if (err) {
        res.send(err);
      }
      res.json(products);
    });
  });
};

exports.editProduct = function(req, res) {
  console.log("Edit: " + req.params.id);
  Product.update({
    _id: req.params.id
  }, {
    name: req.body.name,
    price: req.body.price,
    description: req.body.description,
    category: req.body.category
  }, {
    multi: false
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
  });
  return Product.findById(req.params.id, function(err, product) {
    if (err) {
      res.send(err);
    }
    return res.json(product);
  });
};

exports.addReviewToProduct = function(req, res) {
  console.log('Review: ' + req.body.stars + ' stars, ' + req.body.body + ', by ' + req.body.author + ' added to: ' + req.body.id);
  Product.findByIdAndUpdate(req.body.id, {
    $push: {
      reviews: {
        stars: req.body.stars,
        body: req.body.body,
        author: req.body.author
      }
    }
  }, {
    safe: true,
    upsert: true
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Product.find(function(err, products) {
      if (err) {
        res.send(err);
      }
      res.json(products);
    });
  });
};

exports.deleteProduct = function(req, res) {
  Product.remove({
    _id: req.params.id
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Product.find(function(err, products) {
      if (err) {
        res.send(err);
      }
      res.json(products);
    });
  });
};

exports.categories = function(req, res) {
  return Category.find(function(err, categories) {
    if (err) {
      res.send(err);
    }
    return res.json(categories);
  });
};

exports.addCategory = function(req, res) {
  console.log('Category created: ' + req.body.name + ' id: ' + req.body.id);
  Category.create({
    name: req.body.name
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Category.find(function(err, categories) {
      if (err) {
        res.send(err);
      }
      res.json(categories);
    });
  });
};

exports.image = function(req, res) {
  var file, img;
  console.log(req.params.file);
  file = req.params.file;
  img = fs.readFileSync("./public/images/" + file);
  res.writeHead(200, {
    'Content-Type': 'image/jpg'
  });
  res.end(img, 'binary');
};

exports.AddImage = function(req, res) {
  var filename1;
  console.log(req.body.id);
  req.pipe(req.busboy);
  filename1 = req.busboy.on('file', function(fieldname, file, filename, id) {
    var fstream, name;
    console.log("Uploading: " + filename);
    fstream = fs.createWriteStream('./public/images/' + filename);
    file.pipe(fstream);
    name = filename;
    console.log(name);
    fstream.on('close', function() {});
    return name;
  });
  req.busboy.on('field', function(key, value, keyTruncated, valueTruncated) {
    console.log(value + filename1);
    return Product.findByIdAndUpdate(value, {
      $push: {
        images: filename1
      }
    }, {
      safe: true,
      upsert: true
    }, function(err, product) {
      if (err) {
        res.send(err);
      }
      Product.find(function(err, products) {
        if (err) {
          res.send(err);
        }
        res.json(products);
      });
    });
  });

  /*
  req.busboy.on('file',  (fieldname, file, filename) ->
    console.log filename
    newPath = './public/images/' + filename
    thumbPath = './public/images/thumbs/' + filename
    galleryPath = './public/images/gallerySize/' + filename
    console.log galleryPath
    
    im.resize {
      srcPath: newPath,
      dstPath: thumbPath,
      height:   100 
    }, (err, stdout, stderr) ->
      throw err if (err)
      console.log('resized image to fit within 200x200px');
      return
  
    im.resize {
      srcPath: newPath,
      dstPath: galleryPath,
      height:   400 
    }, (err, stdout, stderr) ->
      throw err if (err)
      console.log('resized image to fit within 500x500px');
      return
    return
  );
   */

  /*
  console.log("Added image ("+req.files.file.name+") to "+req.body.id)
  
  fs.readFile req.files.file.path, (err, data) ->
  
    imageName = req.files.file.name
  
     * If there's an error
    if !imageName
      console.log("There was an error")
      Product.find (err, products) ->
        res.send(err) if (err)            
        res.json(products);
        return
  
    else 
  
      newPath = './public/images/' + imageName
      thumbPath = './public/images/thumbs/' + imageName
      galleryPath = './public/images/gallerySize/' + imageName
  
       * write file to images folder
      fs.writeFile newPath, data, (err) ->
       *console.log(newPath,thumbPath);        
        im.resize {
          srcPath: newPath,
          dstPath: thumbPath,
          height:   100 
        }, (err, stdout, stderr) ->
          throw err if (err)
          console.log('resized image to fit within 200x200px');
          return
  
        im.resize {
          srcPath: newPath,
          dstPath: galleryPath,
          height:   400 
        }, (err, stdout, stderr) ->
          throw err if (err)
          console.log('resized image to fit within 500x500px');
          return
  
        return
  
       * let's see it
       *res.redirect("/images/" + imageName);
    return
  
  
  Product.findByIdAndUpdate req.body.id,
    {$push: {images: req.files.file.name}},
    {safe: true, upsert: true}, (err, product) ->
      res.send(err) if (err)
      
      
      Product.find (err, products) ->
        res.send(err) if (err)            
        res.json(products)
        return
      return
   */
};
