// Generated by CoffeeScript 1.7.1
var Category, Product, Site, fs, im;

Product = require('../models/product');

Category = require('../models/category');

Site = require('../models/site');

fs = require('fs');

im = require('imagemagick');

im.identify.path = '../identify.exe';

im.convert.path = '../convert.exe';

exports.name = function(req, res) {
  res.json({
    name: 'Boby'
  });
};

exports.products = function(req, res) {
  return Product.find(function(err, products) {
    if (err) {
      res.send(err);
    }
    return res.json(products);
  });
};

exports.productsCategory = function(req, res) {
  return Product.find({
    'category': req.params.category
  }, function(err, products) {
    if (err) {
      res.send(err);
    }
    return res.json(products);
  });
};

exports.product = function(req, res) {
  return Product.findById(req.params.id, function(err, product) {
    if (err) {
      res.send(err);
    }
    return res.json(product);
  });
};

exports.addProduct = function(req, res) {
  console.log('Product created: ' + req.body.name + ', ' + req.body.price + ' id: ' + req.body.id);
  Product.create({
    name: req.body.name,
    price: req.body.price,
    description: req.body.description,
    canPurchase: req.body.canPurchase,
    category: req.body.category
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Product.find(function(err, products) {
      if (err) {
        res.send(err);
      }
      res.json(products);
    });
  });
};

exports.editProduct = function(req, res) {
  console.log("Edit: " + req.params.id);
  Product.update({
    _id: req.params.id
  }, {
    name: req.body.name,
    price: req.body.price,
    description: req.body.description,
    category: req.body.category
  }, {
    multi: false
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
  });
  return Product.findById(req.params.id, function(err, product) {
    if (err) {
      res.send(err);
    }
    return res.json(product);
  });
};

exports.addReviewToProduct = function(req, res) {
  console.log('Review: ' + req.body.stars + ' stars, ' + req.body.body + ', by ' + req.body.author + ' added to: ' + req.params.id);
  Product.findByIdAndUpdate(req.params.id, {
    $push: {
      reviews: {
        stars: req.body.stars,
        body: req.body.body,
        author: req.body.author
      }
    }
  }, {
    safe: true,
    upsert: true
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Product.find(function(err, products) {
      if (err) {
        res.send(err);
      }
      res.json(products);
    });
  });
};

exports.deleteProduct = function(req, res) {
  Product.remove({
    _id: req.params.id
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Product.find(function(err, products) {
      if (err) {
        res.send(err);
      }
      res.json(products);
    });
  });
};

exports.categories = function(req, res) {
  return Category.find(function(err, categories) {
    if (err) {
      res.send(err);
    }
    return res.json(categories);
  });
};

exports.addCategory = function(req, res) {
  console.log('Category created: ' + req.body.name + ' id: ' + req.body.id);
  Category.create({
    name: req.body.name
  }, function(err, category) {
    if (err) {
      res.send(err);
    }
    Category.find(function(err, categories) {
      if (err) {
        res.send(err);
      }
      res.json(categories);
    });
  });
};

exports.category = function(req, res) {
  return Category.findById(req.params.id, function(err, category) {
    if (err) {
      res.send(err);
    }
    return res.json(category);
  });
};

exports.editCategory = function(req, res) {
  console.log("Edit Category: " + req.params.id);
  Category.update({
    _id: req.params.id
  }, {
    name: req.body.name
  }, {
    multi: false
  }, function(err, category) {
    if (err) {
      res.send(err);
    }
  });
  return Category.findById(req.params.id, function(err, category) {
    if (err) {
      res.send(err);
    }
    console.log(req.body.name + req.params.oldname);
    Product.update({
      category: req.params.oldname
    }, {
      category: req.body.name
    }, {
      multi: true
    }, function(err, product) {
      if (err) {
        res.send(err);
      }
    });
    return res.json(category);
  });
};

exports.deleteCategory = function(req, res) {
  Product.remove({
    category: req.params.name
  }, function(err, product) {
    if (err) {
      return res.send(err);
    }
  });
  Category.remove({
    _id: req.params.id
  }, function(err, category) {
    if (err) {
      res.send(err);
    }
    Category.find(function(err, categories) {
      if (err) {
        res.send(err);
      }
      res.json(categories);
    });
  });
};

exports.image = function(req, res) {
  var file, img;
  console.log(req.params.file);
  file = req.params.file;
  img = fs.readFileSync("./public/images/" + file);
  res.writeHead(200, {
    'Content-Type': 'image/jpg'
  });
  res.end(img, 'binary');
};

exports.AddImage = function(req, res) {
  console.log("Image: " + req.params.id);
  req.pipe(req.busboy);
  req.busboy.on('file', function(fieldname, file, filename, id) {
    var fstream, name;
    console.log("Uploading: " + filename);
    fstream = fs.createWriteStream('./public/images/' + filename);
    file.pipe(fstream);
    name = filename;
    console.log(name);
    fstream.on('close', function() {
      Product.findByIdAndUpdate(req.params.id, {
        $push: {
          images: filename
        }
      }, {
        safe: true,
        upsert: true
      }, function(err, product) {
        if (err) {
          res.send(err);
        }
        Product.find(function(err, products) {
          if (err) {
            res.send(err);
          }
          res.json(products);
        });
      });
    });
    return name;
  });
};

exports.deleteImage = function(req, res) {
  console.log("Image deleting: " + req.params.id + req.params.name);
  Product.findByIdAndUpdate(req.params.id, {
    $pull: {
      images: req.params.name
    }
  }, {
    safe: true,
    upsert: true
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Product.find(function(err, products) {
      if (err) {
        res.send(err);
      }
      res.json(products);
    });
  });
};

exports.sites = function(req, res) {
  return Site.find({}).sort({
    place: 1
  }).execFind(function(err, sites) {
    if (err) {
      res.send(err);
    }
    return res.json(sites);
  });
};

exports.addSite = function(req, res) {
  console.log('Category created: ' + req.body.title + ' id: ' + req.body.id);
  Site.create({
    title: req.body.title,
    content: req.body.content
  }, function(err, product) {
    if (err) {
      return res.send(err);
    }
  });
  Site.find({}).sort({
    place: 1
  }).execFind(function(err, sites) {
    if (err) {
      res.send(err);
    }
    res.json(sites);
  });
  return;
};

exports.site = function(req, res) {
  Site.findOne({
    'title': req.params.title
  }, function(err, site) {
    if (err) {
      res.send(err);
    }
    return res.json(site);
  });
};

exports.editSite = function(req, res) {
  console.log("Edit Site: " + req.params.id);
  Site.update({
    _id: req.params.id
  }, {
    title: req.body.title,
    content: req.body.content
  }, {
    multi: false
  }, function(err, site) {
    if (err) {
      res.send(err);
    }
  });
  Site.findOne({
    '_id': req.params.id
  }, function(err, site) {
    if (err) {
      res.send(err);
    }
    return res.json(site);
  });
};

exports.deleteSite = function(req, res) {
  Site.remove({
    _id: req.params.id
  }, function(err, product) {
    if (err) {
      res.send(err);
    }
    Site.find({}).sort({
      place: 1
    }).execFind(function(err, sites) {
      if (err) {
        res.send(err);
      }
      res.json(sites);
    });
  });
};

exports.orderSite = function(req, res) {
  var i, _i, _ref;
  console.log("Edit order Site: " + req.body);
  for (i = _i = 0, _ref = req.body.length - 1; _i <= _ref; i = _i += 1) {
    Site.update({
      _id: req.body[i]
    }, {
      place: i
    }, {
      multi: false
    }, function(err, site) {
      if (err) {
        res.send(err);
      }
    });
  }
  Site.find({}).sort({
    place: 1
  }).execFind(function(err, sites) {
    if (err) {
      res.send(err);
    }
    return res.json(sites);
  });
};
