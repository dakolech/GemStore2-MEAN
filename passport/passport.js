// Generated by CoffeeScript 1.7.1
var LocalStrategy, User;

LocalStrategy = require('passport-local').Strategy;

User = require('../models/user');

module.exports = function(passport) {
  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });
  passport.deserializeUser(function(id, done) {
    return User.findById(id, function(err, user) {
      return done(err, user);
    });
  });
  passport.use('local-signup', new LocalStrategy({
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true
  }, function(req, email, password, done) {
    return process.nextTick(function() {}, User.findOne({
      'local.email': email
    }, function(err, user) {
      var newUser;
      if (err) {
        return done(err);
      }
      if (user) {
        return done(null, false, req.flash('signupMessage', 'That email is already taken.'));
      } else {
        newUser = new User();
        newUser.local.email = email;
        newUser.local.password = newUser.generateHash(password);
        return newUser.save(function(err) {
          if (err) {
            throw err;
          }
          return done(null, newUser);
        });
      }
    }));
  }));
  return passport.use('local-login', new LocalStrategy({
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true
  }, function(req, email, password, done) {
    return User.findOne({
      'local.email': email
    }, function(err, user) {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, false, req.flash('loginMessage', 'No user found.'));
      }
      if (!user.validPassword(password)) {
        return done(null, 'wrongpassword', req.flash('loginMessage', 'Oops! Wrong password.'));
      }
      return done(null, user);
    });
  }));
};
